## linear regression of degree 2 (quadratic)
bootq.fn = function(data, index) coefficients(lm(mpg ~ horsepower + I(horsepower^2), data = Auto, subset = index))
set.seed(1)
boot(Auto, bootq.fn, R = 1000)
summary(lm(mpg ~ horsepower + I(horsepower^2), data = Auto))$coef
## Estimating the Accuracy of a Linear Regression Model
## linear regression of degree 1
# First define a function to take the data and index set in and do a regression and return the coefficients
# note this function doesn't need {} because it's only one-line and can also be written in one line
boot.fn = function(data, index)
return(coef(lm(mpg ~ horsepower, data = Auto, subset = index)))
boot.fn(Auto, 1:392)
boot.fn(Auto, sample(392, 392, replace = T))
boot(data = Auto, statistic = boot.fn, R = 1000)                     # to get the bootstrap estimate for coef and their SE of linear regression
summary(lm(mpg ~ horsepower, data = Auto))$coef   # to get the actual estimate for coef and their SE of linear regression
## linear regression of degree 2 (quadratic)
bootq.fn = function(data, index) coefficients(lm(mpg ~ horsepower + I(horsepower^2), data = Auto, subset = index))
set.seed(1)
boot(Auto, bootq.fn, R = 1000)
summary(lm(mpg ~ horsepower + I(horsepower^2), data = Auto))$coef
##### End ####
##@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
rm(list = ls()) ; dev.off() ; plot.new()
##### End ####
##@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
rm(list = ls()) ; dev.off() ; plot.new()
plot.new()
######### Ch 5 - Ex 5 ########
data("Default")
Default
glimpse(Default)
set.seed(1)
logistic.fit = glm(default ~ income + balance, data = Default, family = "binomial")
logistic.fit
summary(logistic.fit)
set.seed(1)
logistic.fit = glm(default ~ income + balance, data = Default, family = "binomial")
summary(logistic.fit)
set.seed(1)
logistic.fit = glm(default ~ income + balance, data = Default, family = "binomial")
summary(logistic.fit)
set.seed(1)
logistic.fit = glm(default ~ income + balance, data = Default, family = "binomial")
coef(logistic.fit)
set.seed(1)
logistic.fit = glm(default ~ income + balance, data = Default, family = "binomial")
coef(logistic.fit)
logistic.fit = glm(default ~ income + balance, data = Default, family = "binomial")
coef(logistic.fit)
logistic.fit = glm(default ~ income + balance, data = Default, family = "binomial")
coef(logistic.fit)
plot(Default$balance ~ Default$default)
plot(Default$income ~ Default$default)
par(mfrow = c(1,2))
plot(Default$balance ~ Default$default)
plot(Default$income ~ Default$default)
par(mfrow = c(1,1))
# Part a
set.seed(1)
logistic.fit = glm(default ~ income + balance, data = Default, family = "binomial")
coef(logistic.fit)
logistic.fit
coefficients(logistic.fit)
coef(logistic.fit)
lapply(c("MASS", "tidyverse", "ISLR", "car", "ggcorrplot", "psych", "class", "boot"),
require, character.only = T) # to load multiple packages at once
######### Ch 5 - Ex 5 ########
data("Default")
# Part a
set.seed(1)
logistic.fit = glm(default ~ income + balance, data = Default, family = "binomial")
coef(logistic.fit)
glimpse(Default)
nrow(Default)
?sample
# Part b - validation set approach
TrainIndex = sample(nrow(Default), nrow(Default)/2) # generate random numbers between 1 and 10,000 for a total of 5,000
logistic.fit = glm(default ~ income + balance,
data = Default,
subset = TrainIndex,
family = "binomial")
coef(logistic.fit)
options(scipen=1)
coef(logistic.fit)
options(scipen=1)
options(scipen=100)
coef(logistic.fit)
options(digits = 5)
options(scipen=100)
coef(logistic.fit)
head(Default[TrainIndex])
head(Default[TrainIndex,])
head(Default[-TrainIndex,])
logistic.prob = predict(logistic.fit,
newdata = Default[-TrainIndex, ],  # this is our test set using the opposite of training index
type = "response")
logistic.prob
summary(logistic.prob)
logistic.pred = rep(0, times = nrow(Default[-TrainIndex, ]))
logistic.pred
logistic.pred[logistic.prob > 0.5] = 1
logistic.pred
Default
Default[-TrainIndex, 'income']
head(Default[-TrainIndex, 'income'])
table('Logistic Prediction'= logistic.pred, 'Observation' = Default[-TrainIndex, 'income'])
logistic.pred
Default[-TrainIndex, 'income']
head(Default)
table('Logistic Prediction'= logistic.pred, 'Observation' = Default[-TrainIndex, 'default'])
(logistic.error.rate = mean(logistic.pred != Default[-TrainIndex, 'default']))
options(digits = 10)
(logistic.error.rate = mean(logistic.pred != Default[-TrainIndex, 'default']))
options(digits = 100)
options(digits = 22)
(logistic.error.rate = mean(logistic.pred != Default[-TrainIndex, 'default']))
Default[-TrainIndex, 'default']
logistic.pred
table('Logistic Prediction'= logistic.pred, 'Observation' = Default[-TrainIndex, 'default'])
logistic.pred = rep('No', times = nrow(Default[-TrainIndex, ]))
logistic.pred[logistic.prob > 0.5] = 'Yes'
table('Logistic Prediction'= logistic.pred, 'Observation' = Default[-TrainIndex, 'default'])
(logistic.error.rate = mean(logistic.pred != Default[-TrainIndex, 'default']))
options(digits = 5)
(logistic.error.rate = mean(logistic.pred != Default[-TrainIndex, 'default']))
# Part b - validation set approach (single run)
RunTimes = 3
RunTimes*2
matrix(RunTimes*2)
matrix(RunTimes*2, nrow = RunTimes, ncol = 2)
matrix(0, nrow = RunTimes, ncol = 2)
logistic.error.rate = data.frame(matrix(0, nrow = RunTimes, ncol = 2))
logistic.error.rate
?data.frame
1:RunTimes
data.frame(matrix(0, nrow = RunTimes, ncol = 2), row.names = 1:RunTimes)
logistic.error.rate = data.frame(matrix(0, nrow = RunTimes, ncol = 1), row.names = 1:RunTimes)
logistic.error.rate
data.frame(matrix(0, nrow = RunTimes, ncol = 1), row.names = 1:RunTimes)
logistic.error.rate = data.frame(matrix(0, nrow = RunTimes, ncol = 2), row.names = 1:RunTimes)
logistic.error.rate
names(logistic.error.rate) = c('Run Number', 'Error Rate')
logistic.error.rate
logistic.error.rate = data.frame(matrix(0, nrow = RunTimes, ncol = 2))
names(logistic.error.rate) = c('Run Number', 'Error Rate')
logistic.error.rate
row.names(logistic.error.rate) = logistic.error.rate$`Run Number`
# Part b - validation set approach (single run)
RunTimes = 3
logistic.error.rate = data.frame(matrix(0, nrow = RunTimes, ncol = 2))
logistic.error.rate
# Part b - validation set approach (single run)
RunTimes = 7
logistic.error.rate = data.frame(matrix(0, nrow = RunTimes, ncol = 2))
logistic.error.rate
# Part b - validation set approach (single run)
RunTimes = 1
logistic.error.rate = data.frame(matrix(0, nrow = RunTimes, ncol = 2))
logistic.error.rate
vector(length = RunTimes)
# Part b - validation set approach (single run)
RunTimes = 2
vector(length = RunTimes)
?vector
vector(mode = "double", length = RunTimes)
?list
1:RunTimes
matrix(0, nrow = RunTimes, ncol = 1)
data.frame(matrix(0, nrow = RunTimes, ncol = 1))
logistic.error.rate = data.frame(matrix(0, nrow = RunTimes, ncol = 1))
names(logistic.error.rate) = 'Error Rate'
logistic.error.rate
# Part b - validation set approach (single run)
RunTimes = 6
logistic.error.rate = data.frame(matrix(0, nrow = RunTimes, ncol = 1))
names(logistic.error.rate) = 'Error Rate'
logistic.error.rate
# Part b - validation set approach (single run)
RunTimes = 6
# Part b - validation set approach (single run)
RunTimes = 4
logistic.error.rate = data.frame(matrix('Error Rate' = 0, nrow = RunTimes, ncol = 1))
logistic.error.rate = data.frame(matrix(0, nrow = RunTimes, ncol = 1, dimnames = 'Error Rate'))
logistic.error.rate = data.frame(matrix(0, nrow = RunTimes, ncol = 1, dimnames = c('Error Rate')))
logistic.error.rate = data.frame(matrix(0, nrow = RunTimes, ncol = 1, dimnames = c('Error Rate',)))
logistic.error.rate = data.frame(matrix(0, nrow = RunTimes, ncol = 1, dimnames = c(Null, 'Error Rate')))
logistic.error.rate = data.frame(matrix(0, nrow = RunTimes, ncol = 1, dimnames = c(NULL, 'Error Rate')))
logistic.error.rate = data.frame(matrix(0, nrow = RunTimes, ncol = 1, dimnames = list(NULL, 'Error Rate')))
logistic.error.rate
# Part b - validation set approach (single run)
RunTimes = 10
logistic.error.rate = data.frame(matrix(0,
nrow = RunTimes,
ncol = 1,
dimnames = list(NULL, 'Error Rate')))
logistic.error.rate
# Part b - validation set approach (single run)
RunTimes = 3
logistic.error.rate = data.frame(matrix(0,
nrow = RunTimes,
ncol = 1,
dimnames = list(NULL, 'Error Rate')))
logistic.error.rate
# Part b - validation set approach (single run)
RunTimes = 3
logistic.error.rate = data.frame(matrix(0,
nrow = RunTimes,
ncol = 1,
dimnames = list('Run Number', 'Error Rate')))
logistic.error.rate = data.frame(matrix(0,
nrow = RunTimes,
ncol = 1,
dimnames = list('Run Number', 'Error Rate')))
# View the matrix
my_matrix
# Create a matrix with named rows and columns
my_matrix <- matrix(c(1, 2, 3, 4, 5), nrow = 5, ncol = 1,
dimnames = list(c("Row1", "Row2", "Row3", "Row4", "Row5"), "Column1"))
# View the matrix
my_matrix
rm(my_matrix)
logistic.error.rate = data.frame(matrix(0,
nrow = RunTimes,
ncol = 1,
dimnames = list(NULL, 'Error Rate')))
logistic.error.rate
# Part b - validation set approach (single run)
RunTimes = 3
logistic.error.rate = data.frame(matrix(0,
nrow = RunTimes,
ncol = 1,
dimnames = list(NULL, 'Error Rate')), )
logistic.error.rate
logistic.error.rate = data.frame(matrix(0,
nrow = RunTimes,
ncol = 1,
dimnames = list(NULL, 'Error Rate')))
logistic.error.rate[i]
i=2
logistic.error.rate[i]
# table('Logistic Prediction'= logistic.pred, 'Observation' = Default[-TrainIndex, 'default'])
logistic.error.rate[i,] = mean(logistic.pred != Default[-TrainIndex, 'default'])
logistic.error.rate[i,]
# Part b - validation set approach (single run)
RunTimes = 3
logistic.error.rate = data.frame(matrix(0,
nrow = RunTimes,
ncol = 1,
dimnames = list(NULL, 'Error Rate')))
logistic.error.rate[i,]
for (i in 1:RunTimes) {
TrainIndex = sample(nrow(Default), nrow(Default)/2)
logistic.fit = glm(default ~ income + balance,
data = Default,
subset = TrainIndex,
family = "binomial")
logistic.prob = predict(logistic.fit,
newdata = Default[-TrainIndex, ],
type = "response")
logistic.pred = rep('No', times = nrow(Default[-TrainIndex, ]))
logistic.pred[logistic.prob > 0.5] = 'Yes'
# table('Logistic Prediction'= logistic.pred, 'Observation' = Default[-TrainIndex, 'default'])
logistic.error.rate[i,] = mean(logistic.pred != Default[-TrainIndex, 'default'])
}
row.names(logistic.error.rate) = logistic.error.rate$`Run Number`
logistic.error.rate
row.names(logistic.error.rate) = logistic.error.rate$`Run Number`
RunTimes = 3
logistic.error.rate = data.frame(matrix(0,
nrow = RunTimes,
ncol = 1,
dimnames = list(NULL, 'Error Rate')))
for (i in 1:RunTimes) {
TrainIndex = sample(nrow(Default), nrow(Default)/2)
logistic.fit = glm(default ~ income + balance,
data = Default,
subset = TrainIndex,
family = "binomial")
logistic.prob = predict(logistic.fit,
newdata = Default[-TrainIndex, ],
type = "response")
logistic.pred = rep('No', times = nrow(Default[-TrainIndex, ]))
logistic.pred[logistic.prob > 0.5] = 'Yes'
# table('Logistic Prediction'= logistic.pred, 'Observation' = Default[-TrainIndex, 'default'])
logistic.error.rate[i,] = mean(logistic.pred != Default[-TrainIndex, 'default'])
}
row.names(logistic.error.rate) = logistic.error.rate$`Run Number`
logistic.error.rate
RunTimes = 3
logistic.error.rate = data.frame(matrix(0,
nrow = RunTimes,
ncol = 1,
dimnames = list(NULL, 'Error Rate')))
for (i in 1:RunTimes) {
TrainIndex = sample(nrow(Default), nrow(Default)/2)
logistic.fit = glm(default ~ income + balance,
data = Default,
subset = TrainIndex,
family = "binomial")
logistic.prob = predict(logistic.fit,
newdata = Default[-TrainIndex, ],
type = "response")
logistic.pred = rep('No', times = nrow(Default[-TrainIndex, ]))
logistic.pred[logistic.prob > 0.5] = 'Yes'
# table('Logistic Prediction'= logistic.pred, 'Observation' = Default[-TrainIndex, 'default'])
logistic.error.rate[i,] = mean(logistic.pred != Default[-TrainIndex, 'default'])
}
row.names(logistic.error.rate) = logistic.error.rate$`Run Number`
logistic.error.rate
RunTimes = 3
logistic.error.rate = data.frame(matrix(0,
nrow = RunTimes,
ncol = 1,
dimnames = list(NULL, 'Error Rate')))
for (i in 1:RunTimes) {
TrainIndex = sample(nrow(Default), nrow(Default)/2)
logistic.fit = glm(default ~ income + balance,
data = Default,
subset = TrainIndex,
family = "binomial")
logistic.prob = predict(logistic.fit,
newdata = Default[-TrainIndex, ],
type = "response")
logistic.pred = rep('No', times = nrow(Default[-TrainIndex, ]))
logistic.pred[logistic.prob > 0.5] = 'Yes'
# table('Logistic Prediction'= logistic.pred, 'Observation' = Default[-TrainIndex, 'default'])
logistic.error.rate[i,] = mean(logistic.pred != Default[-TrainIndex, 'default'])
}
row.names(logistic.error.rate) = logistic.error.rate$`Run Number`
logistic.error.rate
RunTimes = 3
logistic.error.rate = data.frame(matrix(0,
nrow = RunTimes,
ncol = 1,
dimnames = list(NULL, 'Error Rate')))
for (i in 1:RunTimes) {
TrainIndex = sample(nrow(Default), nrow(Default)/2)
logistic.fit = glm(default ~ income + balance,
data = Default,
subset = TrainIndex,
family = "binomial")
logistic.prob = predict(logistic.fit,
newdata = Default[-TrainIndex, ],
type = "response")
logistic.pred = rep('No', times = nrow(Default[-TrainIndex, ]))
logistic.pred[logistic.prob > 0.5] = 'Yes'
# table('Logistic Prediction'= logistic.pred, 'Observation' = Default[-TrainIndex, 'default'])
logistic.error.rate[i,] = mean(logistic.pred != Default[-TrainIndex, 'default'])
}
row.names(logistic.error.rate) = logistic.error.rate$`Run Number`
logistic.error.rate
RunTimes = 3
logistic.error.rate = data.frame(matrix(0,
nrow = RunTimes,
ncol = 1,
dimnames = list(NULL, 'Error Rate')))
for (i in 1:RunTimes) {
TrainIndex = sample(nrow(Default), nrow(Default)/2)
logistic.fit = glm(default ~ income + balance,
data = Default,
subset = TrainIndex,
family = "binomial")
logistic.prob = predict(logistic.fit,
newdata = Default[-TrainIndex, ],
type = "response")
logistic.pred = rep('No', times = nrow(Default[-TrainIndex, ]))
logistic.pred[logistic.prob > 0.5] = 'Yes'
# table('Logistic Prediction'= logistic.pred, 'Observation' = Default[-TrainIndex, 'default'])
logistic.error.rate[i,] = mean(logistic.pred != Default[-TrainIndex, 'default'])
}
row.names(logistic.error.rate) = logistic.error.rate$`Run Number`
logistic.error.rate
RunTimes = 3
logistic.error.rate = data.frame(matrix(0,
nrow = RunTimes,
ncol = 1,
dimnames = list(NULL, 'Error Rate')))
for (i in 1:RunTimes) {
TrainIndex = sample(nrow(Default), nrow(Default)/2)
logistic.fit = glm(default ~ income + balance,
data = Default,
subset = TrainIndex,
family = "binomial")
logistic.prob = predict(logistic.fit,
newdata = Default[-TrainIndex, ],
type = "response")
logistic.pred = rep('No', times = nrow(Default[-TrainIndex, ]))
logistic.pred[logistic.prob > 0.5] = 'Yes'
# table('Logistic Prediction'= logistic.pred, 'Observation' = Default[-TrainIndex, 'default'])
logistic.error.rate[i,] = mean(logistic.pred != Default[-TrainIndex, 'default'])
}
row.names(logistic.error.rate) = logistic.error.rate$`Run Number`
logistic.error.rate
# Part b - validation set approach (single run)
ValidationSetLogistic <- function(RunTimes) {
logistic.error.rate = data.frame(matrix(0,
nrow = RunTimes,
ncol = 1,
dimnames = list(NULL, 'Error Rate')))
for (i in 1:RunTimes) {
TrainIndex = sample(nrow(Default), nrow(Default)/2)
logistic.fit = glm(default ~ income + balance,
data = Default,
subset = TrainIndex,
family = "binomial")
logistic.prob = predict(logistic.fit,
newdata = Default[-TrainIndex, ],
type = "response")
logistic.pred = rep('No', times = nrow(Default[-TrainIndex, ]))
logistic.pred[logistic.prob > 0.5] = 'Yes'
# table('Logistic Prediction'= logistic.pred, 'Observation' = Default[-TrainIndex, 'default'])
logistic.error.rate[i,] = mean(logistic.pred != Default[-TrainIndex, 'default'])
}
row.names(logistic.error.rate) = logistic.error.rate$`Run Number`
logistic.error.rate
}
ValidationSetLogistic(3)
ValidationSetLogistic(3)
ValidationSetLogistic(3)
ValidationSetLogistic(7)
ValidationSetLogistic()
# Part b - validation set approach (single run)
ValidationSetLogistic <- function(RunTimes = 1) {
logistic.error.rate = data.frame(matrix(0,
nrow = RunTimes,
ncol = 1,
dimnames = list(NULL, 'Error Rate')))
for (i in 1:RunTimes) {
TrainIndex = sample(nrow(Default), nrow(Default)/2)
logistic.fit = glm(default ~ income + balance,
data = Default,
subset = TrainIndex,
family = "binomial")
logistic.prob = predict(logistic.fit,
newdata = Default[-TrainIndex, ],
type = "response")
logistic.pred = rep('No', times = nrow(Default[-TrainIndex, ]))
logistic.pred[logistic.prob > 0.5] = 'Yes'
# table('Logistic Prediction'= logistic.pred, 'Observation' = Default[-TrainIndex, 'default'])
logistic.error.rate[i,] = mean(logistic.pred != Default[-TrainIndex, 'default'])
}
row.names(logistic.error.rate) = logistic.error.rate$`Run Number`
return(logistic.error.rate)
}
ValidationSetLogistic()
ValidationSetLogistic(5)
mean(logistic.error.rate)
mean(logistic.error.rate[, 1]
return(mean(logistic.error.rate[, 1]))
mean(logistic.error.rate[, 1])
ValidationSetLogistic(5)
# Part b - validation set approach (single run)
ValidationSetLogistic <- function(RunTimes = 1) {
logistic.error.rate = data.frame(matrix(0,
nrow = RunTimes,
ncol = 1,
dimnames = list(NULL, 'Error Rate')))
for (i in 1:RunTimes) {
TrainIndex = sample(nrow(Default), nrow(Default)/2)
logistic.fit = glm(default ~ income + balance,
data = Default,
subset = TrainIndex,
family = "binomial")
logistic.prob = predict(logistic.fit,
newdata = Default[-TrainIndex, ],
type = "response")
logistic.pred = rep('No', times = nrow(Default[-TrainIndex, ]))
logistic.pred[logistic.prob > 0.5] = 'Yes'
# table('Logistic Prediction'= logistic.pred, 'Observation' = Default[-TrainIndex, 'default'])
logistic.error.rate[i,] = mean(logistic.pred != Default[-TrainIndex, 'default'])
}
row.names(logistic.error.rate) = logistic.error.rate$`Run Number`
return(mean(logistic.error.rate[, 1]))
}
ValidationSetLogistic(5)
ValidationSetLogistic(5)
ValidationSetLogistic(5)
ValidationSetLogistic(5)
ValidationSetLogistic(50)
ValidationSetLogistic(50)
ValidationSetLogistic(50)
ValidationSetLogistic(50)
ValidationSetLogistic(50)
ValidationSetLogistic(3)
ValidationSetLogistic(3)
ValidationSetLogistic(300)
ValidationSetLogistic(3)
##### End ####
##@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
rm(list = ls()) ; dev.off() ; plot.new()
plot.new()
# Part b - Coefficients SE using bootstrap approach
boot.fn = function(data, index)
# Part b - Coefficients SE using bootstrap approach
boot.fn = function(data, index) {
return(coef(glm(default ~ income + balance,
data = Default,
subset = index,
family = "binomial")))
}
lapply(c("MASS", "tidyverse", "ISLR", "car", "ggcorrplot", "psych", "class", "boot"),
require, character.only = T) # to load multiple packages at once
######### Ch 5 - Ex 6 - Logistic on Default Data (SE of Coefficients) ########
data("Default")
# Part b - Coefficients SE using bootstrap approach
boot.fn = function(InputData, index) {
return(coef(glm(default ~ income + balance,
data = InputData,
subset = index,
family = "binomial")))
}
Default
