df %>%
ggplot(aes(x=x,
y=y
)) +  # color is mapped by sex
geom_point(size = 2,
alpha = 0.5) +
theme_classic() +
labs(title = "Ch 5, Ex 8.b (y vs x, Simualated Data)")
cv.glm(data = df, lm.fit1)
# Part c - Fit up to degree 4 polynomial with LOOCV method and find error
lm.fit1 = lm(y ~ x, data = df)
cv.glm(data = df, lm.fit1)
LOOCV.error = cv.glm(data = Auto, glm.fit)
LOOCV.error = cv.glm(data = df, lm.fit1)
View(LOOCV.error)
LOOCV.error$delta
LOOCV.error = rep(0,4)
LOOCV.error
# Part c - Fit up to degree 4 polynomial with LOOCV method and find error
lm.fit1 = lm(y ~ x, data = df)
# Part c - Fit up to degree 4 polynomial with LOOCV method and find error
set.seed(1)
LOOCV.error = rep(0,4)
for (i in 1:4){
lm.fit = lm(y ~ poly(x, i), data = df)
LOOCV.error[i] = cv.glm(data = df, lm.fit)$delta[1]
}
plot(LOOCV.error, type = "o")
LOOCV.error = rep(0,4)
plot(LOOCV.error, type = "o")
i
lm.fit = lm(y ~ poly(x, i), data = df)
LOOCV.error
LOOCV.error[i] = cv.glm(data = df, lm.fit)$delta[1]
LOOCV.error
lm.fit = lm(y ~ poly(x, i), data = df)
lm.fit
cv.glm(data = df, lm.fit)$delta
lm.fit = glm(y ~ poly(x, i), data = df)
cv.glm(data = df, lm.fit)
cv.glm(data = df, lm.fit)$delta
for (i in 1:4){
lm.fit = glm(y ~ poly(x, i), data = df)
LOOCV.error[i] = cv.glm(data = df, lm.fit)$delta[1]
}
plot(LOOCV.error, type = "o")
LOOCV.error
lm.fit
View(lm.fit)
# Part c,d - Fit up to degree 4 polynomial with LOOCV method and find error (different seeds)
set.seed(10)
LOOCV.error = rep(0,4)
for (i in 1:4){
lm.fit = glm(y ~ poly(x, i), data = df)
LOOCV.error[i] = cv.glm(data = df, lm.fit)$delta[1]
}
plot(LOOCV.error, type = "o")
LOOCV.error
# Part c,d - Fit up to degree 4 polynomial with LOOCV method and find error (different seeds)
set.seed(100)
LOOCV.error = rep(0,4)
for (i in 1:4){
lm.fit = glm(y ~ poly(x, i), data = df)
LOOCV.error[i] = cv.glm(data = df, lm.fit)$delta[1]
}
plot(LOOCV.error, type = "o")
LOOCV.error
# Part c,d - Fit up to degree 4 polynomial with LOOCV method and find error (different seeds)
set.seed(1)
i=1
lm.fit = glm(y ~ poly(x, i), data = df)
cv.glm(data = df, lm.fit)$delta[1]
# Part a - generate simulated dataset
set.seed(1)
x = rnorm(100)
y = -2*x^2 + x + rnorm(100)
# Part b - Create a scatter plot
plot(x, y)
df = data.frame(x, y)
# Part c,d - Fit up to degree 4 polynomial with LOOCV method and find error (different seeds)
set.seed(1)
i
lm.fit = glm(y ~ poly(x, i), data = df)
cv.glm(data = df, lm.fit)$delta[1]
set.seed(1)
x = rnorm(100)
y = -2*x^2 + x + rnorm(100)
# Part b - Create a scatter plot
plot(x, y)
df = data.frame(x, y)
# df %>%
#      ggplot(aes(x=x,
#                 y=y
#                 )) +
#      geom_point(size = 2,
#                 alpha = 0.5) +
#      theme_classic() +
#      labs(title = "Ch 5, Ex 8.b (y vs x, Simualated Data)")
# Part c,d - Fit up to degree 4 polynomial with LOOCV method and find error (different seeds)
set.seed(1)
lm.fit1 = lm(y ~ x, data = df)
LOOCV.error = rep(0,4)
for (i in 1:4){
lm.fit = glm(y ~ poly(x, i), data = df)
LOOCV.error[i] = cv.glm(data = df, lm.fit)$delta[1]
}
LOOCV.error
set.seed(1)
x = rnorm(100)
y = -2*x^2 + x + rnorm(100)
# Part b - Create a scatter plot
plot(x, y)
df = data.frame(x, y)
# df %>%
#      ggplot(aes(x=x,
#                 y=y
#                 )) +
#      geom_point(size = 2,
#                 alpha = 0.5) +
#      theme_classic() +
#      labs(title = "Ch 5, Ex 8.b (y vs x, Simualated Data)")
# Part c,d - Fit up to degree 4 polynomial with LOOCV method and find error (different seeds)
set.seed(1)
lm.fit1 = lm(y ~ x, data = df)
LOOCV.error = rep(0,4)
for (i in 1:4){
lm.fit = glm(y ~ poly(x, i), data = df)
LOOCV.error[i] = cv.glm(data = df, lm.fit)$delta[1]
}
LOOCV.error
set.seed(1)
y = rnorm(100)
x = rnorm(100)
y = -2*x^2 + x + rnorm(100)
# Part b - Create a scatter plot
plot(x, y)
df = data.frame(x, y)
# df %>%
#      ggplot(aes(x=x,
#                 y=y
#                 )) +
#      geom_point(size = 2,
#                 alpha = 0.5) +
#      theme_classic() +
#      labs(title = "Ch 5, Ex 8.b (y vs x, Simualated Data)")
# Part c,d - Fit up to degree 4 polynomial with LOOCV method and find error (different seeds)
set.seed(1)
lm.fit1 = lm(y ~ x, data = df)
LOOCV.error = rep(0,4)
for (i in 1:4){
lm.fit = glm(y ~ poly(x, i), data = df)
LOOCV.error[i] = cv.glm(data = df, lm.fit)$delta[1]
}
LOOCV.error
set.seed(1)
y = rnorm(100)
x = rnorm(100)
y = -2*x^2 + x + rnorm(100)
y
set.seed(1)
x = rnorm(100)
y = -2*x^2 + x + rnorm(100)
y
set.seed(1)
y = rnorm(100)
x = rnorm(100)
y
y = -2*x^2 + x + rnorm(100)
y
# Part a - generate simulated dataset
set.seed(1)
x = rnorm(100)
y = -2*x^2 + x + rnorm(100)
y
# Part a - generate simulated dataset
set.seed(1)
rnorm(100)
rnorm(100)
rnorm(100)
x = rnorm(100)
x
x
# Part a - generate simulated dataset
set.seed(1)
x
x = rnorm(100)
x
set.seed(1)
x = rnorm(100)
x
rnorm(100)
x
y = -2*x^2 + x + rnorm(100)
y
# Part a - generate simulated dataset
set.seed(1)
rnorm(100)
y = rnorm(100)
y
x = rnorm(100)
x
x = rnorm(100)
x
x = rnorm(100)
x
# Part a - generate simulated dataset
set.seed(1)
y = rnorm(100)
x = rnorm(100)
y
x
y = -2*x^2 + x + rnorm(100)
y
set.seed(1)
y = rnorm(100)
x = rnorm(100)
y = -2*x^2 + x + rnorm(100)
# Part b - Create a scatter plot
plot(x, y)
df = data.frame(x, y)
# df %>%
#      ggplot(aes(x=x,
#                 y=y
#                 )) +
#      geom_point(size = 2,
#                 alpha = 0.5) +
#      theme_classic() +
#      labs(title = "Ch 5, Ex 8.b (y vs x, Simualated Data)")
# Part c,d - Fit up to degree 4 polynomial with LOOCV method and find error (different seeds)
set.seed(1)
lm.fit1 = lm(y ~ x, data = df)
LOOCV.error = rep(0,4)
for (i in 1:4){
lm.fit = glm(y ~ poly(x, i), data = df)
LOOCV.error[i] = cv.glm(data = df, lm.fit)$delta[1]
}
plot(LOOCV.error, type = "o")
LOOCV.error
LOOCV.error
summary(lm.fit)
coef(summary(lm.fit))
for (i in 1:4){
lm.fit = glm(y ~ poly(x, i), data = df)
coef(summary(lm.fit))
LOOCV.error[i] = cv.glm(data = df, lm.fit)$delta[1]
}
for (i in 1:4){
lm.fit = glm(y ~ poly(x, i), data = df)
message(coef(summary(lm.fit)))
LOOCV.error[i] = cv.glm(data = df, lm.fit)$delta[1]
}
for (i in 1:4){
lm.fit = glm(y ~ poly(x, i), data = df)
print(coef(summary(lm.fit)))
LOOCV.error[i] = cv.glm(data = df, lm.fit)$delta[1]
}
options(scipen = 9)
for (i in 1:4){
lm.fit = glm(y ~ poly(x, i), data = df)
print(coef(summary(lm.fit)))
LOOCV.error[i] = cv.glm(data = df, lm.fit)$delta[1]
}
options(scipen = 90)
for (i in 1:4){
lm.fit = glm(y ~ poly(x, i), data = df)
print(coef(summary(lm.fit)))
LOOCV.error[i] = cv.glm(data = df, lm.fit)$delta[1]
}
options(scipen = 5)
for (i in 1:4){
lm.fit = glm(y ~ poly(x, i), data = df)
print(coef(summary(lm.fit)))
LOOCV.error[i] = cv.glm(data = df, lm.fit)$delta[1]
}
options(scipen = 20)
for (i in 1:4){
lm.fit = glm(y ~ poly(x, i), data = df)
print(coef(summary(lm.fit)))
LOOCV.error[i] = cv.glm(data = df, lm.fit)$delta[1]
}
options(scipen = 50)
for (i in 1:4){
lm.fit = glm(y ~ poly(x, i), data = df)
print(coef(summary(lm.fit)))
LOOCV.error[i] = cv.glm(data = df, lm.fit)$delta[1]
}
lapply(c("MASS", "tidyverse", "ISLR", "car", "ggcorrplot", "psych", "class", "boot"),
require, character.only = T) # to load multiple packages at once
######### Ch 5 - Ex 9 - Working on Boston Dataset
data("Boston")
# a - population mean of medv
muhat = mean(Boston$medv)
muhat
# a - population mean of medv
Muhat.medv = mean(Boston$medv)
# b - standard error of the population mean
SE.medv = sd(Boston$medv / sqrt(nrow(Boston)))
SE.medv
Muhat.medv
rm(x, y, muhat, i, LOOCV.error, df, lm.fit, lm.fit1)
Sample.Mus = rep(0, RunTime)
Sample.Mus = rep(0, 5)
Sample.Mus = rep(0, 10)
Sample.Mus
rm(Sample.Mus)
Boston$medv %>%
sample(SampleSize)
Boston$medv %>%
sample(5)
Boston$medv %>%
sample(5)
Boston$medv %>%
sample(5)
return(Sample.Mu)
# c - find the SE of Muhat using bootstrap
boot.mu.se = function(SampleSize, RunTime) {
Sample.Mu = rep(0, RunTime)
for (i in 1:RunTime) {
Sample.Mu[i] = Boston$medv %>%
sample(SampleSize) %>%
mean()
}
return(Sample.Mu)
}
boot.mu.se(5, 10)
boot.mu.se(50, 5)
nrow(Boston)
boot.mu.se(500, 5)
boot.mu.se(507, 5)
boot.mu.se(506, 5)
boot.mu.se(506, 5)
boot.mu.se(506, 5)
boot.mu.se(505, 5)
# c - find the SE of Muhat using bootstrap
boot.mu.se = function(SampleSize, RunTime) {
Sample.Mu = rep(0, RunTime)
for (i in 1:RunTime) {
Sample.Mu[i] = Boston$medv %>%
sample(SampleSize) %>%
mean()
}
return(sd(Sample.Mu))
}
boot.mu.se(505, 5)
boot.mu.se(505, 5)
boot.mu.se(505, 5)
boot.mu.se(505, 5)
boot.mu.se(505, 50)
boot.mu.se(505, 50)
boot.mu.se(505, 50)
boot.mu.se(505, 500)
boot.mu.se(505, 500)
boot.mu.se(505, 500)
boot.mu.se(505, 500)
boot.mu.se(505, 500)
boot.mu.se(505, 500)
# b - standard error of the population mean
SE.medv = sd(Boston$medv / sqrt(nrow(Boston)))
SE.medv
boot.mu.se(505, 5000)
boot.mu.se(505, 5000)
boot.mu.se(505, 5000)
Sample.Mu
?boot
# c - find the SE of Muhat using bootstrap
boot.mu.se = function(RunTime) {
Sample.Mu = rep(0, RunTime)
for (i in 1:RunTime) {
Sample.Mu[i] = Boston$medv %>%
sample(nrow(Boston), replace = T) %>%
mean()
}
return(sd(Sample.Mu))
}
boot.mu.se(505, 5000)
boot.mu.se(5000)
boot.mu.se(5000)
boot.mu.se(5000)
boot.mu.se(5000)
boot.mu.se(5000)
boot.mu.se(5000)
# another way to use the available boot() function
boot.mu = function(InputData){
return(mean(InputData))
}
boot(Boston$medv, boot.mu, R = 10)
boot.mu(Boston$medv)
boot.mu(Boston$medv)
boot(Boston$medv, boot.mu, R = 100)
boot.mu(Boston$medv)
boot(Boston, boot.mu, R = 100)
Boston$medv
boot.mu(Boston$medv)
x = boot(Boston$medv, boot.mu, R = 100)
# another way to use the available boot() function
boot.mu = function(InputData, index){
return(mean(InputData[index]))
}
boot.mu(Boston$medv)
boot.mu()
boot.mu(Boston$medv, 3)
boot.mu(Boston$medv, 4)
Boston$medv
x = boot(Boston$medv, boot.mu, R = 100)
boot(Boston$medv, boot.mu, R = 100)
boot.mu(Boston$medv)
boot(Boston$medv, boot.mu, R = 1000)
# another way to use the available boot() function
boot.mu = function(InputData, index){
return(mean(InputData))
}
boot.mu(Boston$medv)
boot(Boston$medv, boot.mu, R = 1000)
# another way to use the available boot() function
boot.mu = function(InputData, index){
return(mean(InputData[index]))
}
boot.mu(Boston$medv)
boot(Boston$medv, boot.mu, R = 1000)
boot.mu(Boston$medv)
boot.mu(Boston$nox)
boot(Boston$medv, boot.mu, R = 1000)
lapply(c("MASS", "tidyverse", "ISLR", "car", "ggcorrplot", "psych", "class", "boot"),
require, character.only = T) # to load multiple packages at once
boot(Boston$medv, boot.mu, R = 1000)
# b - standard error of the population mean
SE.medv = sd(Boston$medv / sqrt(nrow(Boston)))
SE.medv
maraz.mu(x$y) # when the index argument is not provided, default is using all of them
boot(Boston$medv, boot.mu, R = 1000)
test = boot(Boston$medv, boot.mu, R = 1000)
View(test)
test$t
mean(test$t)
boot(Boston$medv, boot.mu, R = 1000)
# b - standard error of the population mean
SE.medv = sd(Boston$medv / sqrt(nrow(Boston)))
SE.medv
test = boot(Boston$medv, boot.mu, R = 1000)
boot(Boston$medv, boot.mu, R = 1000)
boot(Boston$medv, boot.mu, R = 1000)
boot(Boston$medv, boot.mu, R = 1000)
boot.mu.se(5000)
boot.mu.se(5000)
sd(test$t)
mean(test$t)
sd(Boston$medv)
sd(Boston$medv / sqrt(nrow(Boston)))
mean(Boston$medv)
boot(Boston$medv, boot.mu, R = 1000)
sd(test$t)
sd(test$t)/sqrt(length(test$t))
boot.results = boot(Boston$medv, boot.mu, R = 1000)
sd(boot_results$t)
boot.results = boot(Boston$medv, boot.mu, R = 1000)
sd(boot.results$t)
boot.results
sd(boot.results$t)
# Part d - 95% CI for the mean of medv
c(Muhat.medv - 2*sd(boot.results$t), Muhat.medv + 2*sd(boot.results$t))
# Part d - 95% CI for the mean of medv
c(Muhat.medv - 2*sd(boot.results$t), " , ", Muhat.medv + 2*sd(boot.results$t))
# Part d - 95% CI for the mean of medv
c(Muhat.medv - 2*sd(boot.results$t), Muhat.medv + 2*sd(boot.results$t))
t.test(medv)
t.test(Boston$medv)
# another way to use the available boot() function (boot() function needs a statistics which is a defined function with two inputs: data and index)
set.seed(1)
boot.mu = function(InputData, index){
return(mean(InputData[index]))
}
maraz.mu(x$y) # when the index argument is not provided, default is using all of them
boot.results = boot(Boston$medv, boot.mu, R = 1000)
# Part d - 95% CI for the mean of medv
c(Muhat.medv - 2*sd(boot.results$t), Muhat.medv + 2*sd(boot.results$t))
t.test(Boston$medv)
# another way to use the available boot() function (boot() function needs a statistics which is a defined function with two inputs: data and index)
set.seed(1)
boot.results = boot(Boston$medv, boot.mu, R = 1000)
# Part d - 95% CI for the mean of medv
c(Muhat.medv - 2*sd(boot.results$t), Muhat.medv + 2*sd(boot.results$t))
t.test(Boston$medv)
boot.results
# Part d - 95% CI for the mean of medv
c(Muhat.medv - 2*sd(boot.results$t), Muhat.medv + 2*sd(boot.results$t))
t.test(Boston$medv)
# Part d - 95% CI for the mean of medv
c(Muhat.medv - 2*sd(boot.results$t), Muhat.medv + 2*sd(boot.results$t))
boot.median = function(InputData, index){
return(median(InputData[index]))
}
boot.results2 = boot(Boston$medv, boot.median, R = 1000)
boot.results2
mean(boot.results2$t)
# Part e - estimate the median value of the population
med.hat = median(Boston$medv)
set.seed(1)
med.hat
# Part g - 10th% of medv
mu0.1hat = quantile(Boston$medv, 0.1)
mu0.1hat
# Part h - find the SE for the 10th% of medv
set.seed(1)
boot.med10th = function(InputData, index){
return(quantile(InputData[index], 0.1))
}
boot(Boston$medv, boot.med10th, R = 1000)
quantile(Boston$medv, 0.1)
boot.med10th = function(InputData, index){
return(quantile(InputData[index], 0.1))
}
boot(Boston$medv, boot.med10th, R = 1000)
